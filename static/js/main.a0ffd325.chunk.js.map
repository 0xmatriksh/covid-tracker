{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/index.js","components/CountryPicker/CountryPicker.jsx","components/Chart/Chart.jsx","App.js","index.js","App.module.css","components/CountryPicker/CountryPicker.module.css","components/Chart/Chart.module.css","images/image.png"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","url","fetchData","country","a","changeableUrl","axios","get","console","log","fetchDailyData","modifiedData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","CountryPicker","handleCountryChange","useState","fetchedCountries","setFetchedCountries","useEffect","fetchAPI","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","i","key","Chart","setDailyData","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChar","options","legend","display","title","text","App","state","fetchedData1","setState","this","image","src","alt","Component","ReactDOM","render","document","getElementById"],"mappings":"wGACAA,EAAOC,QAAU,CAAC,UAAY,yBAAyB,KAAO,oBAAoB,SAAW,wBAAwB,UAAY,yBAAyB,OAAS,wB,4NC4DpJC,EAtDD,SAAC,GAA2D,IAAD,IAAzDC,KAAQC,EAAiD,EAAjDA,UAAWC,EAAsC,EAAtCA,UAAYC,EAA0B,EAA1BA,OAASC,EAAiB,EAAjBA,WACpD,OAAIH,EAIJ,yBAAKI,UAAWC,IAAOC,WACnB,kBAACC,EAAA,EAAD,CAAMD,WAAS,EAACE,QAAS,EAAGC,QAAQ,UACpC,kBAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,UAAaC,IAAMC,GAAI,GAAIC,GAAI,EAAGV,UAAWW,IAAGV,IAAOW,KAAKX,IAAOY,WAC9E,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYC,MAAM,gBAAgBC,cAAY,GAA9C,YACA,kBAACF,EAAA,EAAD,CAAYG,QAAQ,MAChB,kBAAC,IAAD,CACIC,MAAS,EACTC,IAAOxB,EAAUyB,MACjBC,SAAY,IACZC,UAAY,OAEpB,kBAACR,EAAA,EAAD,CAAYC,MAAM,iBAAiB,IAAIQ,KAAKzB,GAAY0B,gBACxD,kBAACV,EAAA,EAAD,CAAYG,QAAQ,SAApB,0CAGJ,kBAACf,EAAA,EAAD,CAAMG,MAAI,EAACC,UAAaC,IAAMC,GAAI,GAAIC,GAAI,EAAGV,UAAWW,IAAGV,IAAOW,KAAKX,IAAOJ,YAC9E,kBAACiB,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYC,MAAM,gBAAgBC,cAAY,GAA9C,aACA,kBAACF,EAAA,EAAD,CAAYG,QAAQ,MAChB,kBAAC,IAAD,CACIC,MAAS,EACTC,IAAOvB,EAAUwB,MACjBC,SAAY,IACZC,UAAY,OAEpB,kBAACR,EAAA,EAAD,CAAYC,MAAM,iBAAiB,IAAIQ,KAAKzB,GAAY0B,gBACxD,kBAACV,EAAA,EAAD,CAAYG,QAAQ,SAApB,0CAGJ,kBAACf,EAAA,EAAD,CAAMG,MAAI,EAACC,UAAaC,IAAMC,GAAI,GAAIC,GAAI,EAAGV,UAAWW,IAAGV,IAAOW,KAAKX,IAAOH,SAC9E,kBAACgB,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYC,MAAM,gBAAgBC,cAAY,GAA9C,UACA,kBAACF,EAAA,EAAD,CAAYG,QAAQ,MACpB,kBAAC,IAAD,CACQC,MAAS,EACTC,IAAOtB,EAAOuB,MACdC,SAAY,IACZC,UAAY,OAEpB,kBAACR,EAAA,EAAD,CAAYC,MAAM,iBAAiB,IAAIQ,KAAKzB,GAAY0B,gBACxD,kBAACV,EAAA,EAAD,CAAYG,QAAQ,SAApB,8CA5CG,c,2CCNTQ,EAAM,iCAECC,EAAS,uCAAG,WAAOC,GAAP,2BAAAC,EAAA,6DACjBC,EAAgBJ,EAEjBE,IACCE,EAAa,UAAMJ,EAAN,sBAAuBE,IAJnB,kBAQkDG,IAAMC,IAAIF,GAR5D,2BAQVnC,KAAQC,EARE,EAQFA,UAAWC,EART,EAQSA,UAAWC,EARpB,EAQoBA,OAASC,EAR7B,EAQ6BA,WAR7B,kBAUV,CAACH,YAAUC,YAAUC,SAAOC,eAVlB,kCAcjBkC,QAAQC,IAAR,MAdiB,0DAAH,sDAkBTC,EAAc,uCAAG,gCAAAN,EAAA,+EAEFE,IAAMC,IAAN,UAAaN,EAAb,WAFE,uBAEf/B,EAFe,EAEfA,KAEDyC,EAAezC,EAAK0C,KAAI,SAACC,GAAD,MAAgB,CAC1C1C,UAAY0C,EAAU1C,UAAU2C,MAChCzC,OAAQwC,EAAUxC,OAAOyC,MACzBC,KAAMF,EAAUG,eAPE,kBASfL,GATe,yFAAH,qDAgBdM,EAAc,uCAAG,8BAAAb,EAAA,+EAEaE,IAAMC,IAAN,UAAaN,EAAb,eAFb,uBAEPiB,EAFO,EAEfhD,KAAQgD,UAFO,kBAIfA,EAAUN,KAAI,SAACM,GAAD,OAAeA,EAAUC,SAJxB,gCAOtBX,QAAQC,IAAR,MAPsB,yDAAH,qD,iBCZZW,EArBO,SAAC,GAA2B,IAA1BC,EAAyB,EAAzBA,oBAAyB,EACGC,mBAAS,IADZ,mBACtCC,EADsC,KACpBC,EADoB,KAW7C,OARAC,qBAAU,YACQ,uCAAG,sBAAArB,EAAA,kEACboB,EADa,SACaP,IADb,6EAAH,qDAIdS,KACD,CAACF,IAGA,kBAACG,EAAA,EAAD,CAAapD,UAAWC,IAAOoD,aAC3B,kBAACC,EAAA,EAAD,CAAcC,aAAa,GAAGC,SAAU,SAACC,GAAD,OAAOX,EAAoBW,EAAEC,OAAOrC,SACxE,4BAAQA,MAAQ,IAAhB,UACC2B,EAAiBX,KAAI,SAACT,EAAS+B,GAAV,OAAgB,4BAAQC,IAAKD,EAAGtC,MAAOO,GAAUA,S,yBC8CxEiC,EA7DF,SAAC,GAAkD,IAAD,IAAhDlE,KAAOC,EAAyC,EAAzCA,UAAUC,EAA+B,EAA/BA,UAAUC,EAAqB,EAArBA,OAAQ8B,EAAa,EAAbA,QAAa,EACxBmB,mBAAS,IADe,mBACpDT,EADoD,KACxCwB,EADwC,KAG3DZ,qBAAU,YACQ,uCAAG,sBAAArB,EAAA,kEACbiC,EADa,SACM3B,IADN,6EAAH,qDAKdgB,KACD,IAEH,IAAMY,EACFzB,EAAU0B,OAEV,kBAAC,IAAD,CACIrE,KAAM,CACFsE,OAAS3B,EAAUD,KAAI,qBAAEG,QACzB0B,SAAW,CAAC,CACRvE,KAAM2C,EAAUD,KAAI,qBAAEzC,aACtBuE,MAAO,WACPC,YAAa,UACbC,MAAM,GACR,CACE1E,KAAM2C,EAAUD,KAAI,qBAAEvC,UACtBqE,MAAO,WACPC,YAAa,MACbE,gBAAiB,uBACjBD,MAAM,OAGA,KAGhBE,EACF3E,EACE,kBAAC,IAAD,CACED,KAAQ,CACJsE,OAAQ,CAAC,WAAY,YAAc,UACnCC,SAAU,CAAC,CACPC,MAAM,SACNG,gBAAgB,CAAC,oBACjB,2BACA,qBAEJ3E,KAAO,CAACC,EAAUyB,MAAMxB,EAAUwB,MAAMvB,EAAOuB,UAGnDmD,QAAU,CACNC,OAAQ,CAACC,SAAQ,GACjBC,MAAO,CAACD,SAAQ,EAAME,KAAK,oBAAD,OAAqBhD,OAC3C,KAGhB,OACI,yBAAK5B,UAAWC,IAAOC,WAClB0B,EAAU2C,EAAUR,I,kCCrBlBc,E,4MA9BXC,MAAQ,CACJnF,KAAO,I,EASXmD,oB,uCAAsB,WAAOlB,GAAP,eAAAC,EAAA,sEACSF,EAAUC,GADnB,OACZmD,EADY,OAGlB,EAAKC,SAAS,CAACrF,KAAOoF,EAAcnD,QAASA,IAH3B,2C,wPALSD,I,OAArBoD,E,OAENE,KAAKD,SAAS,CAACrF,KAAOoF,I,qIAUhB,IAAD,EACkBE,KAAKH,MAArBnF,EADF,EACEA,KAAKiC,EADP,EACOA,QACZ,OACI,yBAAK5B,UAAWC,IAAOC,WACnB,yBAAKF,UAAWC,IAAOiF,MAAOC,IAAKD,IAAOE,IAAI,aAC9C,kBAAC,EAAD,CAAOzF,KAAQA,IACf,kBAAC,EAAD,CAAemD,oBAAuBmC,KAAKnC,sBAC3C,kBAAC,EAAD,CAAOnD,KAAMA,EAAMiC,QAASA,S,GAzB1ByD,aCLlBC,IAASC,OAAO,kBAAC,EAAD,MAAOC,SAASC,eAAe,U,mBCJ/CjG,EAAOC,QAAU,CAAC,UAAY,uBAAuB,MAAQ,qB,mBCA7DD,EAAOC,QAAU,CAAC,YAAc,qC,mBCAhCD,EAAOC,QAAU,CAAC,UAAY,2B,mBCD9BD,EAAOC,QAAU,IAA0B,mC","file":"static/js/main.a0ffd325.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__2_uP7\",\"card\":\"Cards_card__2kNUc\",\"infected\":\"Cards_infected__3zE_q\",\"recovered\":\"Cards_recovered__2O7zs\",\"deaths\":\"Cards_deaths__2HbXe\"};","import React from 'react'\r\nimport {Card, CardContent, Typography, Grid, StylesProvider} from '@material-ui/core'\r\nimport CountUp from 'react-countup'\r\nimport cx from 'classnames';\r\n\r\nimport styles from './Cards.module.css'\r\n\r\nconst Cards = ({data : {confirmed, recovered , deaths , lastUpdate}}) => {\r\n    if(!confirmed) {\r\n        return 'Loading...';\r\n    }\r\n    return (\r\n    <div className={styles.container}>\r\n        <Grid container spacing={3} justify='center'>\r\n        <Grid item component = {Card} xs={12} md={3} className={cx(styles.card,styles.infected)}>\r\n        <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>Infected</Typography>\r\n            <Typography variant='h5'>\r\n                <CountUp\r\n                    start = {0}\r\n                    end = {confirmed.value}\r\n                    duration = {2.5}\r\n                    separator = \",\"\r\n                /></Typography>      \r\n            <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography> \r\n            <Typography variant='body2'>Number of active cases of COVID - 19</Typography> \r\n            </CardContent>\r\n        </Grid>\r\n        <Grid item component = {Card} xs={12} md={3} className={cx(styles.card,styles.recovered)}>\r\n        <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>Recovered</Typography>\r\n            <Typography variant='h5'>\r\n                <CountUp\r\n                    start = {0}\r\n                    end = {recovered.value}\r\n                    duration = {2.5}\r\n                    separator = \",\"\r\n                /></Typography>      \r\n            <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography> \r\n            <Typography variant='body2'>Number of recoveries from COVID - 19</Typography> \r\n            </CardContent>\r\n        </Grid>\r\n        <Grid item component = {Card} xs={12} md={3} className={cx(styles.card,styles.deaths)}>\r\n        <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>Deaths</Typography>\r\n            <Typography variant='h5'>\r\n            <CountUp\r\n                    start = {0}\r\n                    end = {deaths.value}\r\n                    duration = {2.5}\r\n                    separator = \",\"\r\n                /></Typography>      \r\n            <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography> \r\n            <Typography variant='body2'>Number of deaths caused byl COVID - 19</Typography> \r\n            </CardContent>\r\n        </Grid>\r\n        </Grid>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default Cards","import axios from 'axios'\r\nimport CountryPicker from '../components/CountryPicker/CountryPicker';\r\n\r\nconst url = 'https://covid19.mathdro.id/api';\r\n\r\nexport const fetchData = async (country) => {\r\n    let changeableUrl = url;\r\n\r\n    if(country){\r\n        changeableUrl = `${url}/countries/${country}` \r\n    }\r\n\r\n    try{\r\n        const {data : {confirmed, recovered, deaths , lastUpdate}} = await axios.get(changeableUrl);\r\n        \r\n        return {confirmed,recovered,deaths,lastUpdate}\r\n       \r\n    }\r\n    catch(error){\r\n        console.log(error)\r\n    }\r\n}\r\n\r\nexport const fetchDailyData = async () => {\r\n    try {\r\n        const {data}= await axios.get(`${url}/daily`);\r\n        \r\n        const modifiedData = data.map((dailyData) => ({\r\n            confirmed : dailyData.confirmed.total,\r\n            deaths: dailyData.deaths.total,\r\n            date: dailyData.reportDate,\r\n        }));\r\n        return modifiedData;\r\n    }\r\n    catch(error){\r\n\r\n    }\r\n}\r\n\r\nexport const fetchCountries = async () => {\r\n    try {\r\n        const {data : {countries}} = await axios.get(`${url}/countries`);\r\n\r\n        return countries.map((countries) => countries.name)\r\n    }\r\n    catch(error){\r\n        console.log(error);\r\n    }\r\n}","import React, {useState,useEffect} from 'react'\r\nimport { NativeSelect, FormControl} from '@material-ui/core'\r\n\r\nimport { fetchCountries } from '../../api';\r\nimport styles from './CountryPicker.module.css';\r\n\r\nconst CountryPicker = ({handleCountryChange}) => {\r\n    const [fetchedCountries, setFetchedCountries] = useState([]);\r\n\r\n    useEffect(()=> {\r\n        const fetchAPI = async () => {\r\n            setFetchedCountries(await fetchCountries());\r\n\r\n        }\r\n        fetchAPI();\r\n    }, [setFetchedCountries]);\r\n\r\n    return (\r\n        <FormControl className={styles.formControl}>\r\n            <NativeSelect defaultValue=\"\" onChange={(e) => handleCountryChange(e.target.value)}>\r\n                <option value = \"\">Global</option>\r\n                {fetchedCountries.map((country, i) => <option key={i} value={country}>{country}</option>)}\r\n            </NativeSelect>\r\n        </FormControl>\r\n    )\r\n}\r\n\r\nexport default CountryPicker","import React,{useState,useEffect} from 'react'\r\nimport  { fetchDailyData} from '../../api';\r\nimport { Line , Bar} from 'react-chartjs-2';\r\n\r\nimport styles from './Chart.module.css';\r\n\r\nconst Chart= ({data: {confirmed,recovered,deaths},country}) => {\r\n    const [dailyData , setDailyData] = useState([]);\r\n\r\n    useEffect(()=> {\r\n        const fetchAPI = async () => {\r\n            setDailyData(await fetchDailyData());\r\n        }\r\n        \r\n\r\n        fetchAPI();\r\n    }, []);\r\n\r\n    const lineChart = (\r\n        dailyData.length\r\n        ? (\r\n        <Line \r\n            data={{\r\n                labels : dailyData.map(({date}) => date),\r\n                datasets : [{\r\n                    data: dailyData.map(({confirmed}) => confirmed),\r\n                    label: 'Infected',\r\n                    borderColor: '#3333ff',\r\n                    fill: true\r\n                },{\r\n                    data: dailyData.map(({deaths}) => deaths),\r\n                    label: 'Infected',\r\n                    borderColor: 'red',\r\n                    backgroundColor: 'rgba(255, 0, 0, 0.5)',\r\n                    fill: true\r\n                }],\r\n            }}\r\n                    />) : null \r\n    );\r\n\r\n    const barChar = (\r\n        confirmed\r\n        ? <Bar\r\n            data = {{\r\n                labels: ['Infected', 'Recovered' , 'Deaths'],\r\n                datasets: [{\r\n                    label:'People',\r\n                    backgroundColor:['rgba(0,0,255,0.5)',\r\n                    'rgba(105, 197, 105, 0.5)',\r\n                    'rgba(255,0,0,0.5)'\r\n                ],\r\n                data : [confirmed.value,recovered.value,deaths.value]\r\n                }]\r\n            }}\r\n            options= {{\r\n                legend: {display:false},\r\n                title: {display:true, text:`Current state in ${country}`},\r\n            }} /> : null\r\n    );\r\n    \r\n    return (\r\n        <div className={styles.container}>\r\n            {country ? barChar : lineChart}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chart\r\n","\r\nimport React, { Component } from 'react'\r\nimport Cards from './components/Cards/Cards'\r\nimport CountryPicker from './components/CountryPicker/CountryPicker'\r\nimport Chart from './components/Chart/Chart'\r\nimport styles from './App.module.css'\r\nimport { fetchData } from './api/index'\r\n\r\nimport image from './images/image.png';\r\n\r\nclass App extends Component {\r\n    state = {\r\n        data : {},\r\n    }\r\n\r\n    async componentDidMount(){\r\n        const fetchedData1 = await fetchData();\r\n\r\n        this.setState({data : fetchedData1});\r\n    }\r\n\r\n    handleCountryChange = async (country) => {\r\n        const fetchedData1 = await fetchData(country);\r\n\r\n        this.setState({data : fetchedData1, country: country})\r\n        \r\n    }\r\n\r\n    render() {\r\n        const {data,country} = this.state\r\n        return (\r\n            <div className={styles.container}>\r\n                <img className={styles.image} src={image} alt='COVID 19'></img>\r\n                <Cards data = {data}/>\r\n                <CountryPicker handleCountryChange = {this.handleCountryChange}/>\r\n                <Chart data={data} country={country} /> \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\n\r\nimport App from './App'\r\n\r\nReactDOM.render(<App/>,document.getElementById('root'))","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__193Vq\",\"image\":\"App_image__1GJCx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__1i0ee\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__28LsA\"};","module.exports = __webpack_public_path__ + \"static/media/image.d7265326.png\";"],"sourceRoot":""}